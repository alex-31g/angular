import { Component, OnInit } from '@angular/core';
import { Observable } from 'rxjs';

// методы
import { from, of, interval } from 'rxjs';

// операторы
import { filter, map, take } from 'rxjs/operators';

@Component({
  selector: 'app-f',
  templateUrl: './f.component.html',
})
export class FComponent implements OnInit {
  constructor() {}

  // ===============================================
  // 6. Создание Observable-объектов (потоков) на основе данных.
  //    RXJS методы: from, of, interval
  // ===============================================

  ngOnInit() {
    console.clear();

    // ----------------
    // Создание потока - from
    // ----------------

    // Создание потока на основе массива с помощью rxjs-метода from().
    // На выходе получаем поток, в котором будет 10 событий.
    // Пример ниже равносильный тому, как мы делали с помощью Observable.create.
    // Запись с помощью Observable.create:
    var source = Observable.create((observer) => {
      for (let i = 0; i < 10; i++) {
        observer.next(i);
      }
    });
    // Запись с помощью rxjs-метода from():
    var source1 = from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);

    // ----------------
    // Создание потока - of
    // ----------------

    // Cоздание потока на основе значений c помощью rxjs-метода of()
    var source2 = of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);

    // ----------------
    // Создание потока - interval
    // ----------------

    // interval - создает Observable-объект, который с заданным интервалом выдает события и в этом событии производит инкрементацию счетчика начиная с 0
    var source3 = interval(500);

    // ----------------
    // Обработка потока
    // ----------------

    // До того как была выполнена подписка с помощью subscribe(), можно работать со стримом (потоком) с помощью rxjs-метода pipe(),
    // внутри которого используем rxjs-операторы

    console.log('source ------------');

    source
      .pipe(
        filter((x: any) => x % 2 == 0), // поток в котором находятся четные элементы
        map((x: any) => x + '.') // поток в котором находятся измененные значения
      )
      .forEach((x) => console.log(x)); // действия для каждого элемента в потоке

    console.log('source1 -----------');

    source1
      .pipe(
        filter((x: any) => x % 2 == 0), // поток в котором находятся четные элементы
        map((x: any) => x + '.') // поток в котором находятся измененные значения
      )
      .forEach((x) => console.log(x)); // действия для каждого элемента в потоке

    console.log('source2 -----------');

    source2
      .pipe(
        filter((x: any) => x % 2 == 0), // поток в котором находятся четные элементы
        map((x: any) => x + '.') // поток в котором находятся измененные значения
      )
      .forEach((x) => console.log(x)); // действия для каждого элемента в потоке

    console.log('source3 -----------');

    source3
      .pipe(
        take(10), // отсекаем первые 10 событий потока
        filter((x) => x % 2 == 0), // поток в котором находятся четные элементы
        map((x) => x + '.') // поток в котором находятся измененные значения
      )
      .forEach((x) => console.log(x)); // действия для каждого элемента в потоке
  }
}
